import datetime
import json
import os
import re
import socket
import subprocess
import threading
import time

import keyboard
import mss
import psutil
import pyautogui
import pygetwindow as gw
import pyperclip
import screeninfo
import telegram
from dotenv import load_dotenv
from telegram import ChatAction, InlineKeyboardButton, InlineKeyboardMarkup

import blocks.u_common_func
from blocks import s_path, u_send_logs
from blocks.s_path import (DEFPATH, KILL, SPEAK_HEAD_A, SPEAK_HEAD_H,
                           SPEAK_HEAD_S, SPEAK_MON_L, SPEAK_MON_R, SVCL,
                           dict_of_num, filler)
from blocks.u_common_func import (clock, menu_updater, mod_fix, sound_alert,
                                  thread_make, user_input)
from blocks.u_handle_db import read_db_cell, write_db_cell

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
bot = telegram.Bot(token=TOKEN)

s_con_path = "s_connection.json"


def get_volume():
    if read_db_cell("output_device",) == "headphones_h":
        keys = [SPEAK_HEAD_H[1], "head_h"]
    elif read_db_cell("output_device") == "headphones_s":
        keys = [SPEAK_HEAD_S[1], "head_s"]
    elif read_db_cell("output_device") == "headphones_a":
        keys = [SPEAK_HEAD_A[1], "head_a"]
    elif read_db_cell("output_device") == "monitor_r":
        keys = [SPEAK_MON_R[1], "mon_r"]
    elif read_db_cell("output_device") == "monitor_l":
        keys = [SPEAK_MON_L[1], "mon_l"]
    else:
        return

    try:
        vol = int(round(float(subprocess.check_output(
            f"{SVCL} {keys[0]}".split()).decode('utf-8').strip())))
    except ValueError:
        vol = 0
    write_db_cell("volume", vol, keys[1])


def set_output_device(device, query):
    os.system(f'{s_path.SETDEVDEF} {device[0]}')
    os.system(f'{s_path.SETDEVDEFCOMM} {device[0]}')
    device_name = ''
    if read_db_cell("pc", None) == 1:
        device_name = "headphones_h" if device == SPEAK_HEAD_H \
            else "monitor_r" if device == SPEAK_MON_R \
            else "monitor_l" if device == SPEAK_MON_L \
            else "none"
        current_markup = query.message.reply_markup
        current_markup.inline_keyboard[0][
            0].text = f"üåÄ {read_db_cell('volume', 'head_h')} {'üü¢' if device == SPEAK_HEAD_H else '‚ö´Ô∏è'}"
        current_markup.inline_keyboard[0][
            1].text = f"{'üü¢' if device == SPEAK_MON_R else '‚ö´Ô∏è'} {read_db_cell('volume', 'mon_r')} üñ•"
        current_markup.inline_keyboard[1][
            0].text = f"{'üü¢' if device == SPEAK_MON_L else '‚ö´Ô∏è'} {read_db_cell('volume', 'mon_l')} üñ•"
        query.edit_message_reply_markup(reply_markup=current_markup)
    elif read_db_cell("pc", None) == 2:
        device_name = "headphones_h" if device == SPEAK_HEAD_H \
            else "headphones_s" if device == SPEAK_HEAD_S \
            else "headphones_a" if device == SPEAK_HEAD_A \
            else "monitor_r" if device == SPEAK_MON_R \
            else "none"
        current_markup = query.message.reply_markup
        current_markup.inline_keyboard[0][
            0].text = f"üåÄ {read_db_cell('volume', 'head_h')} {'üü¢' if device == SPEAK_HEAD_H else '‚ö´Ô∏è'}"
        current_markup.inline_keyboard[0][
            1].text = f"{'üü¢' if device == SPEAK_MON_R else '‚ö´Ô∏è'} {read_db_cell('volume', 'mon_r')} üñ•"
        current_markup.inline_keyboard[1][
            0].text = f"üé∏ {read_db_cell('volume', 'head_s')} {'üü¢' if device == SPEAK_HEAD_S else '‚ö´Ô∏è'}"
        current_markup.inline_keyboard[1][
            1].text = f"{'üü¢' if device == SPEAK_HEAD_A else '‚ö´Ô∏è'} {read_db_cell('volume', 'head_a')} ü©∏"
        query.edit_message_reply_markup(reply_markup=current_markup)
    write_db_cell("output_device", device_name)


def take_screenshot(key, context, update):
    context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
    if not os.path.exists(s_path.SCREENPATH):
        os.makedirs(s_path.SCREENPATH)
    for file_name in os.listdir(s_path.SCREENPATH):
        file_path = os.path.join(s_path.SCREENPATH, file_name)
        os.remove(file_path)
    if key in range(-1, 9):
        sct = mss.mss()
        file = sct.shot(
            mon=key, output=f'{s_path.SCREENPATH}/screen_{mod_fix(mod_type="name")}.png')
    elif key == None:
        active_window = gw.getActiveWindow()
        x, y, width, height = active_window.left, active_window.top, active_window.width, active_window.height
        with mss.mss() as sct:
            monitor = {"left": x, "top": y, "width": width, "height": height}
            screenshot = sct.grab(monitor)
            mss.tools.to_png(screenshot.rgb, screenshot.size,
                             output=f'{s_path.SCREENPATH}/screen_{mod_fix(mod_type="name")}.png')
    for filename in os.listdir(s_path.SCREENPATH):
        photo_message = context.bot.send_photo(chat_id=update.effective_chat.id,
                                               photo=open(os.path.join(
                                                   s_path.SCREENPATH, filename), 'rb'),
                                               reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å",
                                                                                                        callback_data=f"scrn_del:{filename}")]]))
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UserDict
        context.user_data[filename] = photo_message.message_id
    if read_db_cell("sound_status") == 1:
        sound_alert("sound_screenshot.mp3")


def speed_test():
    u_send_logs.log_form_cmd(update=None, context=None,
                             cmd=speed_test.__name__,
                             action="–∑–∞–ø—É—â–µ–Ω", effect=True)
    while True:
        p = subprocess.Popen(
            fr'"{DEFPATH}\resource\speedtest.exe" --format=json',
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stderr –≤ stdout
            shell=True, text=True)
        time.sleep(30)
        result = p.communicate()[0]
        with open(fr'{DEFPATH}\data\s_connection.json', 'w') as f:
            f.write(result)


def time_to_upd(upd_time, cur_time):
    upd_time_obj = datetime.datetime.strptime(upd_time, "%H:%M:%S")
    cur_time_obj = datetime.datetime.strptime(cur_time, "%H:%M:%S")
    time_diff = (upd_time_obj - cur_time_obj).total_seconds()
    if time_diff < 0:
        time_diff += 30
    return int(time_diff)


def explorer_fix():
    os.system(f"{KILL} explorer.exe")
    os.system("start explorer.exe")


def check_health():
    while True:
        if read_db_cell("pc_health_check", "check_status") == 1:
            cpu_percent = psutil.cpu_percent(interval=3)
            write_db_cell("pc_health_check", cpu_percent, "cpu")
            memory = psutil.virtual_memory()
            write_db_cell("pc_health_check", memory.percent, "ram")


def computer_menu(update, context):
    user_input(0, "none")
    write_db_cell("pc_health_check", 0, "check_status")
    write_db_cell("updater_status", 0)
    query = update.callback_query
    user_id = str(query.message.chat_id)
    keyboard = [[InlineKeyboardButton("üîÇ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞", callback_data='multi'),
                 InlineKeyboardButton("üîí VPN", callback_data='vpn')],
                [InlineKeyboardButton("üì∑ –≠–∫—Ä–∞–Ω", callback_data='screen'),
                 InlineKeyboardButton("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", callback_data='clipboard')],
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data='health'),
                 InlineKeyboardButton("‚ö† –ü–∏—Ç–∞–Ω–∏–µ", callback_data='power')],
                [InlineKeyboardButton(
                    "üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data='additional_pc_menu')],
                [InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üñ• *–ö–æ–º–ø—å—é—Ç–µ—Ä*",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)


def multi_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    get_volume()
    keyboard = [
        [InlineKeyboardButton(f"üåÄ {read_db_cell('volume', 'head_h')} "
                              f"{'üü¢' if read_db_cell('output_device') == 'headphones_h' else '‚ö´'}",
                              callback_data='set_dev_head_h'),
         InlineKeyboardButton(f"{'üü¢' if read_db_cell('output_device') == 'monitor_r' else '‚ö´'} "
                              f"{read_db_cell('volume', 'mon_r')} üñ•",
                              callback_data='set_dev_mon_r')]]
    if read_db_cell("pc", None) == 1:
        keyboard.append([InlineKeyboardButton(f"{'üü¢' if read_db_cell('output_device') == 'monitor_l' else '‚ö´'} "
                                              f"{read_db_cell('volume', 'mon_l')} üñ•",
                                              callback_data='set_dev_mon_l')])
    elif read_db_cell("pc", None) == 2:
        keyboard.append([InlineKeyboardButton(
            f"üé∏ {read_db_cell('volume', 'head_s')} "
            f"{'üü¢' if read_db_cell('output_device') == 'headphones_s' else '‚ö´'}",
            callback_data='set_dev_head_s'),
            InlineKeyboardButton(
                f"{'üü¢' if read_db_cell('output_device') == 'headphones_a' else '‚ö´'} "
                f"{read_db_cell('volume', 'head_a')} ü©∏",
                callback_data='set_dev_head_a')])
    keyboard += [
                [InlineKeyboardButton("‚è™", callback_data='multi_pull'),
                 InlineKeyboardButton("‚èØ", callback_data='multi_on_off'),
                 InlineKeyboardButton("‚è©", callback_data='multi_force')],

                [InlineKeyboardButton("‚èÆ", callback_data='multi_prev'),
                 InlineKeyboardButton("50", callback_data="vol_50"),
                 InlineKeyboardButton("‚è≠", callback_data='multi_next')],

                [InlineKeyboardButton("‚ûñ", callback_data='vol_down'),
                 InlineKeyboardButton("-10", callback_data="vol_down10"),
                 InlineKeyboardButton(f"{'üîá' if read_db_cell('volume_status') == 0 else 'üîä'}",
                                      callback_data='vol_on_off'),
                 InlineKeyboardButton("+10", callback_data="vol_up10"),
                 InlineKeyboardButton("‚ûï", callback_data='vol_up')]]

    if read_db_cell("hints_status") == 1:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üí°", callback_data='hints_multi'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üîÇ *–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞*{mod_fix()}",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)


def vpn_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    daten, timen = clock()
    try:
        download = ((read_db_cell("download", 'bytes', filename=s_con_path) * 8) /
                    (read_db_cell("download", 'elapsed', filename=s_con_path) * 1000))
        upload = ((read_db_cell("upload", 'bytes', filename=s_con_path) * 8) /
                  (read_db_cell("upload", 'elapsed', filename=s_con_path) * 1000))
        sp_avg = round((download + upload) / 2, 2)

        url = read_db_cell("result", 'url', filename=s_con_path)
        ping = round(read_db_cell("ping", 'latency', filename=s_con_path), 2)
        int_ip = read_db_cell("interface", 'internalIp', filename=s_con_path)
        ext_ip = read_db_cell("interface", 'externalIp', filename=s_con_path)
        upd_time = read_db_cell("timestamp", filename=s_con_path)[11:-1]
        upd_time = timen[:-6] + upd_time[2:]
        left_time = str(time_to_upd(
            str(upd_time), str(timen))).replace('-', '')
    except (json.decoder.JSONDecodeError, KeyError, FileNotFoundError, ValueError) as err:
        int_ip = socket.gethostbyname(socket.gethostname())
        ping, ext_ip = "0", "0.0.0.0"
        sp_avg = "0.00"
        url, upd_time, left_time = "", timen, "0"

    about = fr'''[–î–∞–Ω–Ω—ã–µ —Å–µ—Ç–∏]({url}):
            _–ó–∞–¥–µ—Ä–∂–∫–∞:_ `{ping}ms`
            _–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP:_ `{int_ip}`
            _–í–Ω–µ—à–Ω–∏–π IP:_ `{ext_ip}`
\- \- \- \- \- \- \- \- \- \- \- \- \- \- \- \-
    _–û–±–Ω–æ–≤–ª–µ–Ω–æ:_ {upd_time}
    _–û—Å—Ç–∞–ª–æ—Å—å:_ {left_time}—Å–µ–∫'''
    keyboard = [[InlineKeyboardButton(f"üá©üá™ DE-tcp {'üü¢' if read_db_cell('vpn_status') == 'vpn_1' else '‚ö´'}",
                                      callback_data='vpn_1'),
                 InlineKeyboardButton(f"üáπüá∑ TR-tcp {'üü¢' if read_db_cell('vpn_status') == 'vpn_2' else '‚ö´'}",
                                      callback_data='vpn_2'),
                 InlineKeyboardButton(f"üá±üáπ LT-tcp {'üü¢' if read_db_cell('vpn_status') == 'vpn_3' else '‚ö´'}",
                                      callback_data='vpn_3')],
                [InlineKeyboardButton(f"üá©üá™ DE-udp {'üü¢' if read_db_cell('vpn_status') == 'vpn_4' else '‚ö´'}",
                                      callback_data='vpn_4'),
                 InlineKeyboardButton(f"üá∫üá¶ UA-udp {'üü¢' if read_db_cell('vpn_status') == 'vpn_5' else '‚ö´'}",
                                      callback_data='vpn_5'),
                 InlineKeyboardButton(f"üá´üáÆ FI-udp {'üü¢' if read_db_cell('vpn_status') == 'vpn_6' else '‚ö´'}",
                                      callback_data='vpn_6')],

                [InlineKeyboardButton(f"üì∂ Mbps: {sp_avg}", callback_data='con_speed'),
                 InlineKeyboardButton("‚≠ï –í—ã–∫–ª—é—á–∏—Ç—å ", callback_data='vpn_off')],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                 InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üîí *VPN*{mod_fix()}\n{about}",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)
    if read_db_cell("updater_status") == 0:
        write_db_cell("updater_status", 1)
        thread_make("updater_speed", menu_updater, vpn_menu, update, context)


def power_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    keyboard = [
        # [InlineKeyboardButton(f"‚ö´üü¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ LED [x] ", callback_data='led_upd')],
        [InlineKeyboardButton("üîÑ", callback_data='pc_reb'),
         InlineKeyboardButton("üí§", callback_data='pc_hyb'),
         InlineKeyboardButton("‚≠ï", callback_data='pc_off')],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='pc_canc')],
        [InlineKeyboardButton("üôà", callback_data='mon_off')]]

    if read_db_cell("hints_status") == 1:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üí°", callback_data='hints_power'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}‚ö† *–ü–∏—Ç–∞–Ω–∏–µ*",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)


def screen_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    num_monitors = len(screeninfo.get_monitors())
    keyboard = [
        [InlineKeyboardButton("üî≥", callback_data='scrn_full')]]
    keyboard_add = []
    for i in range(1, num_monitors + 1):
        keyboard_add.append(InlineKeyboardButton(f"{dict_of_num[i]}", callback_data=f'scrn_{i}'))
    keyboard.append(keyboard_add)
    keyboard.append([InlineKeyboardButton("‚óæ", callback_data='scrn_app')])

    if read_db_cell("hints_status") == 1:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton(
                            "üí°", callback_data='hints_screen'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üì∑ *–≠–∫—Ä–∞–Ω*",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)


def clipboard_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    link = None
    if pyperclip.paste():
        mes = pyperclip.paste()
        if len(mes) > 4030:
            mes = mes[:4030]
        if re.findall(r'https?://[^\s<>"]+|www\.[^\s<>"]+', mes):
            link = re.findall(r'https?://[^\s<>"]+|www\.[^\s<>"]+', mes)[0]
            link = re.sub(r'[\]\),\']', '', link)
    else:
        mes = "–ü—É—Å—Ç–æ"
    mes = mes.replace('{', '\{').replace('}', '\}')
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear_clipboard')]]
    if link is not None:
        keyboard.append([InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", url=link)])
    if read_db_cell("hints_status") == 1:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton(
                            "üí°", callback_data='hints_clipboard_menu'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üìã *–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞*{mod_fix()}\n`{mes}`",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)
    if read_db_cell("updater_status") == 0:
        write_db_cell("updater_status", 1)
        thread_make("updater_speed", menu_updater,
                    clipboard_menu, update, context)


def health_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    write_db_cell("pc_health_check", 1, "check_status")
    mes = f'''
CPU: {read_db_cell("pc_health_check", "cpu")}%
RAM: {read_db_cell("pc_health_check", "ram")}%
    '''
    mes = mes.replace(".", r"\.")
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                 InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üèÉ‚Äç‚ôÇÔ∏è *–°–æ—Å—Ç–æ—è–Ω–∏–µ*{mod_fix()}{mes}",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)
    if read_db_cell("updater_status") == 0:
        write_db_cell("updater_status", 1)
        thread_make("updater_health", menu_updater,
                    health_menu, update, context)


def additional_pc_menu(update, context):
    query = update.callback_query
    user_id = str(query.message.chat_id)
    keyboard = [
        [InlineKeyboardButton("üóÇÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data='explorer_fix')]]
    if read_db_cell("hints_status") == 1:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton(
                            "üí°", callback_data='hints_additional_pc_menu'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='computer'),
                        InlineKeyboardButton("üîù –ú–µ–Ω—é", callback_data='mmenu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=f"{filler}üìä *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ*",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN_V2)


thread_speed_test = threading.Thread(target=speed_test)
thread_check_health = threading.Thread(target=check_health)
